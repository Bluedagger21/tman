#!/bin/bash

# Path to the SQLite database file
DB_FILE="testcases.db"

# Create testcases table if it doesn't exist
sqlite3 $DB_FILE "CREATE TABLE IF NOT EXISTS testcases (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, directory TEXT, size_in_mb INTEGER, created_date TEXT, modified_date TEXT, tarball_status TEXT);"

# Function to create a new testcase directory
create_testcase() {
    local name=$1
    local directory=$2

    # Check if the testcase already exists
    if [[ $(sqlite3 $DB_FILE "SELECT COUNT(*) FROM testcases WHERE name='$name';") -gt 0 ]]; then
        echo "Testcase '$name' already exists."
        return
    fi

    # Create the directory
    mkdir -p "$directory"

    # Insert the testcase into the database
    local current_date=$(date +"%Y-%m-%d %H:%M:%S")
    sqlite3 $DB_FILE "INSERT INTO testcases (name, directory, size_in_mb, created_date, modified_date, tarball_status) VALUES ('$name', '$directory', 0, '$current_date', '$current_date', 'Not Created');"

    echo "Testcase '$name' created."
}

# Function to delete a testcase directory
delete_testcase() {
    local name=$1

    # Check if the testcase exists
    if [[ $(sqlite3 $DB_FILE "SELECT COUNT(*) FROM testcases WHERE name='$name';") -eq 0 ]]; then
        echo "Testcase '$name' does not exist."
        return
    fi

    # Get the directory path from the database
    local directory=$(sqlite3 $DB_FILE "SELECT directory FROM testcases WHERE name='$name';")

    # Get the last modified date from the database
    local last_modified=$(sqlite3 $DB_FILE "SELECT modified_date FROM testcases WHERE name='$name';")

    # Get the tarball status from the database
    local tarball_status=$(sqlite3 $DB_FILE "SELECT tarball_status FROM testcases WHERE name='$name';")

    # Get the size in MB of the directory
    local directory_size=$(du -sm "$directory" | awk '{print $1}')

    # Display all the details of the testcase in an organized way
    echo "Testcase '$name' details:"
    echo "Directory: $directory"
    echo "Last Modified: $last_modified"
    echo "Tarball Status: $tarball_status"
    echo "Directory Size: $directory_size MB"

    # Ask the user if they want to delete the testcase
    read -p "Are you sure you want to delete this testcase? (y/n) " -n 1 -r
    echo

    # Delete the directory and database entry if the user confirms
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$directory"
        sqlite3 $DB_FILE "DELETE FROM testcases WHERE name='$name';"
    fi

    echo "Testcase '$name' deleted."
}

# Function to list testcase directories
list_testcases() {
    local filter=$1

    # Query all testcases from the database
    local testcases=""
    if [[ -z "$filter" ]]; then
        testcases=$(sqlite3 $DB_FILE "SELECT id, name, created_date, modified_date, tarball_status FROM testcases;")
    else
        testcases=$(sqlite3 $DB_FILE "SELECT id, name, created_date, modified_date, tarball_status FROM testcases WHERE name REGEXP '$filter';")
    fi

    if [[ -z "$testcases" ]]; then
        echo "No testcases found."
    else
        echo "Testcases:"
        while IFS='|' read -r id name created_date modified_date tarball_status; do
            local directory=$(sqlite3 $DB_FILE "SELECT directory FROM testcases WHERE id=$id;")
            local size=$(du -sh "$directory" | cut -f1)
            echo "ID: $id   Name: $name   Size: $size   Created: $created_date   Modified: $modified_date   Tarball Status: $tarball_status"
        done <<< "$testcases"
    fi
}

# Function to synchronize testcase directories
sync_testcases() {
    # Query all testcases from the database
    local testcases=$(sqlite3 $DB_FILE "SELECT id, name, directory, modified_date, tarball_status FROM testcases;")

    if [[ -z "$testcases" ]]; then
        echo "No testcases found."
        return
    fi

    # Loop through each testcase
    while IFS='|' read -r id name directory modified_date tarball_status; do
        # Check if the directory exists
        if [[ -d "$directory" ]]; then
            # Get the current modification date of the directory
            local current_modified_date=$(date -r "$directory" +"%Y-%m-%d %H:%M:%S")

            # Check if the directory has been modified
            if [[ "$current_modified_date" != "$modified_date" ]]; then
                # Update the modification date in the database
                sqlite3 $DB_FILE "UPDATE testcases SET modified_date='$current_modified_date', tarball_status='Not Created' WHERE id=$id;"

                echo "Testcase '$name' directory has been modified."
            fi

            # Check if a tarball exists and is up to date
            if [[ -f "$name.tar.gz" ]]; then
                # Get the modification date of the tarball
                local tarball_modified_date=$(date -r "$name.tar.gz" +"%Y-%m-%d %H:%M:%S")

                # Check if the tarball is up to date
                if [[ "$tarball_modified_date" == "$current_modified_date" ]]; then
                    # Update the tarball status in the database
                    sqlite3 $DB_FILE "UPDATE testcases SET tarball_status='Up to Date' WHERE id=$id;"
                else
                    # Update the tarball status in the database
                    sqlite3 $DB_FILE "UPDATE testcases SET tarball_status='Not Up to Date' WHERE id=$id;"

                    echo "Testcase '$name' tarball is not up to date."

                    # Prompt to update the tarball
                    read -p "Do you want to update the tarball? (y/n) " -n 1 -r
                    echo

                    # Update the tarball if the user confirms
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        tarball_testcase "$name"
                    fi
                fi
            else
                # Update the tarball status in the database
                sqlite3 $DB_FILE "UPDATE testcases SET tarball_status='Not Created' WHERE id=$id;"

                echo "Testcase '$name' tarball does not exist."
            fi
        else
            echo "Testcase '$name' directory does not exist."
        fi
    done <<< "$testcases"
}


# Function to tarball a testcase directory
tarball_testcase() {
    local name=$1

    # Check if the testcase exists
    if [[ $(sqlite3 $DB_FILE "SELECT COUNT(*) FROM testcases WHERE name='$name';") -eq 0 ]]; then
        echo "Testcase '$name' does not exist."
        return
    fi

    # Get the directory path from the database
    local directory=$(sqlite3 $DB_FILE "SELECT directory FROM testcases WHERE name='$name';")

    # Create a tarball of the directory
    tar -czf "$name.tar.gz" "$directory"

    # Update the tarball status in the database
    local current_date=$(date +"%Y-%m-%d %H:%M:%S")
    sqlite3 $DB_FILE "UPDATE testcases SET modified_date='$current_date', tarball_status='Up to Date' WHERE name='$name';"

    echo "Testcase '$name' tarballed."
}

# Parse command-line options
while getopts "c:d:l:t:" option; do
    case $option in
        c)
            create_testcase "$OPTARG"
            ;;
        d)
            delete_testcase "$OPTARG"
            ;;
        l)
            list_testcases
            ;;
        t)
            tarball_testcase "$OPTARG"
            ;;
        *)
            echo "Invalid option."
            exit 1
            ;;
    esac
done
